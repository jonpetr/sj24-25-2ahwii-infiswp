import { Database } from "https://deno.land/x/sqlite3/mod.ts";
import { assert } from "https://deno.land/std/testing/asserts.ts";
import { writeCSV } from "https://deno.land/x/csv/mod.ts";

const dataPath = '../nmap-datenfiles';
const db = new Database("nmap_data.db");
const outputCsvPath = "./nmap_output.csv";

async function createTable() {
    // Uncomment this section if database storage is required
    /*
    await db.query(`
      CREATE TABLE IF NOT EXISTS scans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date DATETIME,
        host TEXT,
        mac TEXT
      )
    `);
    */
}

function parseDate(dateStr: string): Date {
    const p = dateStr.split('_');
    return new Date(`${p[0]}:${p[1]}:${p[2]}+${p[3]}:${p[4]}`);
}

async function main() {
    await createTable();
    const csvData: Array<{ Datum_mit_Uhrzeit_und_Zone: string; MAC: string; IP: string }> = [];

    try {
        const dirEntries = await Deno.readDir(dataPath);

        for await (const dirEntry of dirEntries) {
            if (!dirEntry.isFile) continue;

            let date;
            try {
                date = parseDate(dirEntry.name);
            } catch (err) {
                assert(err instanceof Error);
                console.error("Error parsing date:", dirEntry.name, err.message);
                continue;
            }

            const filePath = `${dataPath}/${dirEntry.name}`;
            let host = undefined;
            let mac = undefined;

            for (const line of (await Deno.readTextFile(filePath)).split("\n")) {
                if (
                    line.trim() === "" ||
                    line.startsWith("Starting Nmap") ||
                    line.startsWith("Nmap done") ||
                    line.startsWith("Host is up")
                ) {
                    continue;
                }

                if (line.startsWith("Nmap scan report for ")) {
                    host = line.split(" ")[4];
                    continue;
                }

                if (line.startsWith("MAC Address: ")) {
                    mac = line.split(" ")[2].toLowerCase();
                    csvData.push({
                        Datum_mit_Uhrzeit_und_Zone: date.toISOString(),
                        MAC: mac,
                        IP: host,
                    });
                }
            }
        }

        // Schreibe die Daten in eine CSV-Datei
        await writeCSV(Deno.createSync(outputCsvPath), csvData);
        console.log(`CSV-Datei wurde erfolgreich erstellt: ${outputCsvPath}`);
    } catch (err) {
        console.error("Error reading the file:", err);
    }
}

await main();
+